<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://masrobby.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://masrobby.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-06-27T07:19:12+00:00</updated><id>https://masrobby.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Installing a LEMP (Linux, Nginx, MySQL/MariaDB, PHP)</title><link href="https://masrobby.github.io/blog/2024/install-lemp/" rel="alternate" type="text/html" title="Installing a LEMP (Linux, Nginx, MySQL/MariaDB, PHP)"/><published>2024-05-10T10:50:00+00:00</published><updated>2024-05-10T10:50:00+00:00</updated><id>https://masrobby.github.io/blog/2024/install-lemp</id><content type="html" xml:base="https://masrobby.github.io/blog/2024/install-lemp/"><![CDATA[<p>Installing a LEMP (Linux, Nginx, MySQL/MariaDB, PHP) stack on a Linux server is a popular choice for hosting dynamic websites and web applications. Here’s a step-by-step guide on how to install LEMP:</p> <h2 id="step-1-update-package-repositories">Step 1: Update Package Repositories</h2> <p>Before installing any software, it’s a good practice to update the package repositories to ensure you’re installing the latest versions of the software packages. Run the following commands:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt upgrade
</code></pre></div></div> <p>For distributions other than Ubuntu, you may need to use a different package manager, such as yum for CentOS or dnf for Fedora.</p> <h2 id="step-2-install-nginx">Step 2: Install Nginx</h2> <p>Nginx is a lightweight and high-performance web server. Install it using the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>nginx
</code></pre></div></div> <p>After installation, start the Nginx service and enable it to start on boot:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl start nginx
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>nginx
</code></pre></div></div> <h2 id="step-3-install-mysqlmariadb">Step 3: Install MySQL/MariaDB</h2> <p>You can choose either MySQL or MariaDB as the database server. Install your preferred database server using one of the following commands: For MySQL:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>mysql-server
</code></pre></div></div> <p>For MariaDB:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>mariadb-server
</code></pre></div></div> <p>During the installation process, you’ll be prompted to set a root password for the database server. Follow the instructions to complete the installation. Start the MySQL or MariaDB service and enable it to start on boot:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl start mysql
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>mysql
</code></pre></div></div> <h2 id="step-4-secure-mysqlmariadb-installation-optional-but-recommended">Step 4: Secure MySQL/MariaDB Installation (Optional but Recommended)</h2> <p>MySQL and MariaDB provide a script to secure the installation and set some security options. Run the following command and follow the instructions:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>mysql_secure_installation
</code></pre></div></div> <h2 id="step-5-install-php">Step 5: Install PHP</h2> <p>PHP is a server-side scripting language used for dynamic web content. Install PHP along with common PHP extensions using the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>php-fpm php-mysql
</code></pre></div></div> <h2 id="step-6-configure-nginx-to-use-php">Step 6: Configure Nginx to Use PHP</h2> <p>Nginx needs to be configured to pass PHP requests to the PHP processor. Open the default Nginx configuration file:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nano /etc/nginx/sites-available/default
</code></pre></div></div> <p>Find the following block:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>location ~ <span class="se">\.</span>php<span class="nv">$ </span><span class="o">{</span>
include snippets/fastcgi-php.conf<span class="p">;</span>
fastcgi_pass unix:/var/run/php/php7.4-fpm.sock<span class="p">;</span>
<span class="o">}</span>
</code></pre></div></div> <p>Uncomment these lines if necessary (remove the ‘#’ at the beginning of each line). Save and close the file, then restart Nginx for the changes to take effect:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart nginx
</code></pre></div></div> <h2 id="step-7-test-php-processing">Step 7: Test PHP Processing</h2> <p>Create a PHP test file in the Nginx document root directory to test PHP processing:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nano /var/www/html/info.php
</code></pre></div></div> <p>Add the following PHP code to the file:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?php
phpinfo<span class="o">()</span><span class="p">;</span>
?&gt;
</code></pre></div></div> <p>Save and close the file. Now, you can access this file in a web browser by navigating to ‘http://your_server_ip/info.php’. You should see the PHP information page if PHP is configured correctly.</p> <h2 id="step-8-firewall-configuration">Step 8: Firewall Configuration</h2> <p>If you have a firewall enabled (such as UFW), you need to allow traffic on port 80 (HTTP) and, if necessary, port 443 (HTTPS):</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ufw allow <span class="s1">'Nginx Full'</span>
</code></pre></div></div> <h2 id="step-9-finalize-configuration">Step 9: Finalize Configuration</h2> <p>You have now successfully installed the LEMP stack on your server. You can now deploy your web applications or websites and configure Nginx server blocks as needed. Remember to regularly update your server’s software and follow security best practices to keep your LEMP stack secure and up-to-date.</p>]]></content><author><name></name></author><category term="guide"/><category term="lemp"/><summary type="html"><![CDATA[Installing a LEMP (Linux, Nginx, MySQL/MariaDB, PHP) stack on a Linux server is a popular choice for hosting dynamic websites and web applications. Here’s a step-by-step guide on how to install LEMP:]]></summary></entry><entry><title type="html">Simple guide on how to SSH into a Linux server</title><link href="https://masrobby.github.io/blog/2024/ssh-to-linux/" rel="alternate" type="text/html" title="Simple guide on how to SSH into a Linux server"/><published>2024-05-10T10:35:00+00:00</published><updated>2024-05-10T10:35:00+00:00</updated><id>https://masrobby.github.io/blog/2024/ssh-to-linux</id><content type="html" xml:base="https://masrobby.github.io/blog/2024/ssh-to-linux/"><![CDATA[<p>Here’s a simple guide on how to SSH into a Linux server:</p> <h2 id="step-1-open-a-terminal">Step 1: Open a Terminal</h2> <p>On your local machine, whether it’s running Linux, macOS, or Windows (using a tool like PuTTY), open a terminal or command prompt.</p> <h2 id="step-2-use-the-ssh-command">Step 2: Use the SSH Command</h2> <p>Once you have the terminal open, use the ssh command followed by the username and the IP address or domain name of the server you want to connect to. The basic syntax is:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh username@server_ip_or_domain
</code></pre></div></div> <p>For example:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh ssh john@example.com
</code></pre></div></div> <p>If the server uses a non-standard SSH port (not the default port 22), you can specify it with the -p flag followed by the port number. For example:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-p</span> 2222 john@example.com
</code></pre></div></div> <h2 id="step-3-enter-your-password-if-required">Step 3: Enter Your Password (If Required)</h2> <p>If this is your first time connecting to the server from your local machine, you may be prompted to confirm the server’s fingerprint. Once confirmed, you’ll then be prompted to enter the password for the username you provided. Note that when typing your password, you won’t see any characters on the screen.</p> <h2 id="step-4-confirm-successful-connection">Step 4: Confirm Successful Connection</h2> <p>Once you’ve entered the correct password, you should be logged into the server via SSH. You’ll see a command prompt indicating that you’re now interacting with the server remotely.</p> <h2 id="step-5-perform-tasks-on-the-server">Step 5: Perform Tasks on the Server</h2> <p>Now that you’re connected, you can perform various tasks on the server just like you would if you were physically sitting in front of it. You can navigate the file system, edit files, install software, and more.</p> <h2 id="step-6-exiting-the-ssh-session">Step 6: Exiting the SSH Session</h2> <p>To exit the SSH session and return to your local machine’s command prompt, simply type:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">exit</span>
</code></pre></div></div> <p>And press Enter. This will close the connection to the server.</p> <p>That’s it! You’ve successfully SSH’d into a Linux server. Remember to always keep your server credentials secure and avoid sharing them with unauthorized individuals.</p>]]></content><author><name></name></author><category term="guide"/><category term="ssh"/><category term="into"/><category term="linux"/><summary type="html"><![CDATA[Here’s a simple guide on how to SSH into a Linux server:]]></summary></entry><entry><title type="html">Setting up Python and VS Code</title><link href="https://masrobby.github.io/blog/2024/python-setup/" rel="alternate" type="text/html" title="Setting up Python and VS Code"/><published>2024-03-31T12:00:00+00:00</published><updated>2024-03-31T12:00:00+00:00</updated><id>https://masrobby.github.io/blog/2024/python-setup</id><content type="html" xml:base="https://masrobby.github.io/blog/2024/python-setup/"><![CDATA[<p>This is how I setup my Python environment alongside Visual Studio Code (VS Code) on a fresh Windows/Linux installation.</p> <h2 id="python-installation">Python Installation</h2> <ol> <li> <p>For Windows, download the latest Python installer from the <a href="https://www.python.org/downloads/windows">official website</a>. For Linux, Python is usually pre-installed, but if it isn’t installed, you can install it using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>apt update
 <span class="nb">sudo </span>apt <span class="nb">install </span>python3 python3-pip
</code></pre></div> </div> </li> <li> <p>If in Linux, add the following to the <code class="language-plaintext highlighter-rouge">~/.bashrc</code> or <code class="language-plaintext highlighter-rouge">~/.profile</code> file:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PATH</span><span class="s2">:~/.local/bin"</span>
</code></pre></div> </div> </li> <li> <p>Install the essential packages:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> pip <span class="nb">install</span> <span class="nt">--default-timeout</span><span class="o">=</span>100 matplotlib numpy pandas scipy sympy astropy tabulate uncertainties jupyter notebook ipympl ipykernel scikit-learn tqdm plotly
 pip <span class="nb">install </span>seaborn keras tensorflow cupy-cuda116 pysimplegui openpyxl <span class="c"># these are optional packages, install only if needed</span>
</code></pre></div> </div> </li> </ol> <h2 id="visual-studio-code-installation">Visual Studio Code Installation</h2> <ol> <li> <p>For Windows, download the latest VS Code installer from the <a href="https://code.visualstudio.com/download">official website</a>. For Linux, VS Code can be installed using the following commands:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>apt-get <span class="nb">install </span>wget gpg
 wget <span class="nt">-qO-</span> https://packages.microsoft.com/keys/microsoft.asc | gpg <span class="nt">--dearmor</span> <span class="o">&gt;</span> packages.microsoft.gpg
 <span class="nb">sudo install</span> <span class="nt">-D</span> <span class="nt">-o</span> root <span class="nt">-g</span> root <span class="nt">-m</span> 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
 <span class="nb">sudo </span>sh <span class="nt">-c</span> <span class="s1">'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" &gt; /etc/apt/sources.list.d/vscode.list'</span>
 <span class="nb">rm</span> <span class="nt">-f</span> packages.microsoft.gpg
    
 <span class="nb">sudo </span>apt <span class="nb">install </span>apt-transport-https
 <span class="nb">sudo </span>apt update
 <span class="nb">sudo </span>apt <span class="nb">install </span>code
</code></pre></div> </div> </li> </ol>]]></content><author><name></name></author><category term="guide"/><category term="python"/><category term="vscode"/><category term="setup"/><summary type="html"><![CDATA[This is how I setup my Python environment alongside Visual Studio Code (VS Code) on a fresh Windows/Linux installation.]]></summary></entry><entry><title type="html">Setting up a Ubuntu 22.04 LTS VM in Oracle Virtualbox</title><link href="https://masrobby.github.io/blog/2024/ubuntu-vm-setup/" rel="alternate" type="text/html" title="Setting up a Ubuntu 22.04 LTS VM in Oracle Virtualbox"/><published>2024-03-30T12:00:00+00:00</published><updated>2024-03-30T12:00:00+00:00</updated><id>https://masrobby.github.io/blog/2024/ubuntu-vm-setup</id><content type="html" xml:base="https://masrobby.github.io/blog/2024/ubuntu-vm-setup/"><![CDATA[<p>This is how I setup my Ubuntu 22.04 LTS VM every time I need to work on a fresh installation.</p> <h2 id="pre-installation">Pre-Installation</h2> <ol> <li>Load the Ubuntu 22.04 LTS ISO file when initializing the new VM, but disable the unattended installation.</li> <li>Allocate (at least) 2 CPU cores and 4 GB of RAM.</li> <li>Create a new virtual hard disk with a size of (at least) 25 GB.</li> </ol> <h2 id="during-installation">During Installation</h2> <ol> <li>Select the US-US keyboard layout.</li> <li>Select the minimal installation option.</li> <li>Select the Jakarta, Indonesia region.</li> <li>By default, I set the passwords of my VM to 0000 and enable automatic login.</li> </ol> <h2 id="post-installation">Post-Installation</h2> <ol> <li>Skip the Ubuntu Pro subscription.</li> <li>Disable sending system information to Canonical.</li> <li>Remove Ubuntu softwares and Help from the favourites bar, and move the home folder shortcut to the top-right.</li> <li>Go to the settings and enable the following: <ol> <li>Power: Set blank screen to never</li> <li>Appearance: Dark mode</li> <li>Language &amp; Region: Set the language format to UK (requires reboot and login)</li> </ol> </li> <li> <p>Install the following packages:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>apt update
 <span class="nb">sudo </span>apt <span class="nb">install </span>build-essential dkms linux-headers-<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-r</span><span class="si">)</span>
</code></pre></div> </div> </li> <li>Install the Virtualbox Guest Additions Disk and run the autorun script.</li> <li> <p>Add the current user to the vboxsf group:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>adduser <span class="nv">$USER</span> vboxsf
</code></pre></div> </div> </li> <li>Reboot the VM.</li> <li>Eject the Virtualbox Guest Additions Disk.</li> <li>Enable bidirectional shared clipboard and add shared folders if necessary.</li> <li> <p>Update all softwares:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt upgrade
</code></pre></div> </div> </li> <li>Shut down and create a snapshot of the fresh VM.</li> </ol>]]></content><author><name></name></author><category term="guide"/><category term="vm"/><category term="linux"/><category term="setup"/><summary type="html"><![CDATA[This is how I setup my Ubuntu 22.04 LTS VM every time I need to work on a fresh installation.]]></summary></entry></feed>